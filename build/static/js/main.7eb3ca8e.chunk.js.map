{"version":3,"sources":["services/http.js","config/index.js","services/Entity.js","components/Canvas/FreehandDrawingTool.js","components/Canvas/GeometryReshapingTool.js","components/Canvas/DiagramWrapper.jsx","components/Canvas/Canvas.jsx","components/Panel/PanelEntity/PanelEntity.jsx","components/Panel/Panel.jsx","utils/getBasicParams.js","components/Entity/Entity.jsx","utils/usePopulateDetails.js","components/EntityList/EntityList.jsx","utils/usePopulateEntities.js","App.js","reportWebVitals.js","index.js"],"names":["http","axios","create","baseURL","config","API_URL","interceptors","request","use","a","headers","Authorization","Buffer","from","toString","error","Promise","reject","response","status","require","console","log","process","local","Entity","url","get","property","name","FreehandDrawingTool","_temporaryShape","go","make","fill","strokeWidth","_archetypePartData","_isBackgroundOnly","temp","layerName","this","isEnabled","diagram","isReadOnly","isModelReadOnly","allowInsert","currentTool","isBackgroundOnly","findPartAt","lastInput","documentPoint","isMouseCaptured","currentCursor","temporaryShape","part","remove","p","shape","viewpt","viewportBounds","position","q","x","y","f","g","add","geometry","geo","fig","figures","first","segs","segments","idx","count","last","elt","Math","abs","endX","endY","geo2","copy","fig2","Line","isActive","doActivate","addPoint","started","pos","normalize","startTransaction","d","model","copyNodeData","archetypePartData","addNodeData","findPartForData","location","bounds","width","height","findObject","stopTool","commitTransaction","val","panel","GeometryReshapingTool","call","h","figure","desiredSize","stroke","cursor","_handleArchetype","_reshapeObjectName","_handle","_adornedShape","_originalGeometry","inherit","Object","defineProperty","prototype","set","value","updateAdornments","isSelected","selelt","reshapeObjectName","actualBounds","isReal","isVisibleObject","canReshape","isVisible","type","Path","adornment","findAdornment","makeAdornment","b","size","elements","each","undefined","_typ","_fig","seg","_seg","startX","startY","point1X","point1Y","point2X","point2Y","alignment","addAdornment","getDocumentPoint","TopLeft","angle","getDocumentAngle","removeAdornment","Spot","locationObjectName","locationSpot","makeHandle","QuadraticBezier","Bezier","category","adornedObject","handleArchetype","canStart","allowReshape","left","findToolHandleAt","firstInput","doDeactivate","stopTransaction","doCancel","doMouseMove","newpt","computeReshape","reshape","doMouseUp","transactionResult","newPoint","adornedShape","locpt","getLocalPoint","handle","offset","NaN","ensureBounds","locationObject","equals","Center","move","subtract","rotate","maybeUpdate","DiagramWrapper","props","modeChange","isDraw","diagramRef","current","getDiagram","toolManager","findTool","React","addDiagramListener","onDiagramEvent","removeDiagramListener","$","text","color","layout","linkKeyProperty","makeUniqueKeyFunction","m","data","k","key","findNodeDataForKey","makeUniqueLinkKeyFunction","findLinkDataForKey","mouseDownTools","insertAt","nodeTemplateMap","isLayoutPositioned","parse","makeTwoWay","stringify","selectionAdorned","selectionObjectName","selectionAdornmentTemplate","margin","resizable","resizeObjectName","rotatable","rotateObjectName","reshapable","tool","mouseMoveTools","className","ref","divClassName","initDiagram","onClick","Canvas","PanelEntity","visible","style","styles","title","Panel","children","panels","right","bottom","top","Boolean","length","map","index","getBasicParams","item","rectDotLeft","rectDotTop","entityName","setName","setSelected","getAttributes","entity","elem","attributes","getNumber","defaultValue","getCssStyles","atrs","css","cssName","prettyName","defaultStyle","styleValue","getEntityNameForPanelDetails","setLoading","atr","replace","retrievePanels","extractPanel","panelProperty","regex","panelName","EntityService","getDetails","res","numberPanels","panelItem","result","j","push","EntityList","useState","selected","setPanels","loading","entities","setEntities","useEffect","getAll","then","reduce","acc","JSON","objects","catch","e","addEntityItem","state","usePopulateEntities","firstsResponse","panelEntity","panelsReg","requests","usePopulateDetails","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eb3ca8e.chunk.js","sourcesContent":["import axios from 'axios'\nimport config from '../config'\n\nexport const http = axios.create({\n  // baseURL: 'https://52.243.97.180:8089/servicesNS/nobody/apmTest2/api/sets'\n  baseURL: config.API_URL\n})\n\nhttp.interceptors.request.use(\n  async (config) => {\n    config.headers.Authorization = `Basic ${Buffer.from(\n      `oleksi:sHs7&%s5B0^5`,\n      'utf8'\n    ).toString('base64')}`\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  }\n)\n\nhttp.interceptors.response.use(\n  (response) => {\n    return response\n  },\n  (error) => {\n    if (error.response) {\n      if (error.response.status === 401) {\n        return Promise.reject(error)\n      }\n    }\n    return Promise.reject(error)\n  }\n)\n","require('dotenv').config()\n\nconsole.log(process.env.local)\n\nif (!process.env.API_URL) {\n  // throw new Error('Please provide all required environment variables')\n}\n\nexport default {\n  API_URL: process.env.API_URL\n}\n","import { http } from './http'\n\nclass Entity {\n  static async getAll(url) {\n    return http.get(url)\n  }\n\n  static async getDetails(property, name) {\n    return http.get(`/${property}/entities/${name}`)\n  }\n}\n\nexport default Entity\n","/*\r\n *  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\r\n */\r\n\r\n/*\r\n * This is an extension and not part of the main GoJS library.\r\n * Note that the API for this class may change with any version, even point releases.\r\n * If you intend to use an extension in production, you should copy the code to your own source directory.\r\n * Extensions can be found in the GoJS kit under the extensions or extensionsTS folders.\r\n * See the Extensions intro page (https://gojs.net/latest/intro/extensions.html) for more information.\r\n */\r\n\r\nimport * as go from 'gojs'\r\n\r\n/**\r\n * The FreehandDrawingTool allows the user to draw a shape using the mouse.\r\n * It collects all of the points from a mouse-down, all mouse-moves, until a mouse-up,\r\n * and puts all of those points in a {@link Geometry} used by a {@link Shape}.\r\n * It then adds a node data object to the diagram's model.\r\n *\r\n * This tool may be installed as the first mouse down tool:\r\n * ```js\r\n *   myDiagram.toolManager.mouseDownTools.insertAt(0, new FreehandDrawingTool());\r\n * ```\r\n *\r\n * The Shape used during the drawing operation can be customized by setting {@link #temporaryShape}.\r\n * The node data added to the model can be customized by setting {@link #archetypePartData}.\r\n *\r\n * If you want to experiment with this extension, try the <a href=\"../../extensionsTS/FreehandDrawing.html\">Freehand Drawing</a> sample.\r\n * @category Tool Extension\r\n */\r\nexport class FreehandDrawingTool extends go.Tool {\r\n  // this is the Shape that is shown during a drawing operation\r\n  _temporaryShape = go.GraphObject.make(go.Shape, {\r\n    name: 'SHAPE',\r\n    fill: null,\r\n    strokeWidth: 1.5\r\n  })\r\n  _archetypePartData = {} // the data to copy for a new polyline Part\r\n  _isBackgroundOnly = true // affects canStart()\r\n\r\n  // the Shape has to be inside a temporary Part that is used during the drawing operation\r\n  temp = go.GraphObject.make(\r\n    go.Part,\r\n    { layerName: 'Tool' },\r\n    this._temporaryShape\r\n  )\r\n\r\n  constructor() {\r\n    super()\r\n    this.name = 'FreehandDrawing'\r\n  }\r\n\r\n  /**\r\n   * Gets or sets the Shape that is used to hold the line as it is being drawn.\r\n   *\r\n   * The default value is a simple Shape drawing an unfilled open thin black line.\r\n   */\r\n  get temporaryShape() {\r\n    return this._temporaryShape\r\n  }\r\n  set temporaryShape(val) {\r\n    if (this._temporaryShape !== val && val !== null) {\r\n      val.name = 'SHAPE'\r\n      const panel = this._temporaryShape.panel\r\n      if (panel !== null) {\r\n        panel.remove(this._temporaryShape)\r\n        this._temporaryShape = val\r\n        panel.add(this._temporaryShape)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets or sets the node data object that is copied and added to the model\r\n   * when the freehand drawing operation completes.\r\n   */\r\n  get archetypePartData() {\r\n    return this._archetypePartData\r\n  }\r\n  set archetypePartData(val) {\r\n    this._archetypePartData = val\r\n  }\r\n\r\n  /**\r\n   * Gets or sets whether this tool can only run if the user starts in the diagram's background\r\n   * rather than on top of an existing Part.\r\n   *\r\n   * The default value is true.\r\n   */\r\n  get isBackgroundOnly() {\r\n    return this._isBackgroundOnly\r\n  }\r\n  set isBackgroundOnly(val) {\r\n    this._isBackgroundOnly = val\r\n  }\r\n\r\n  /**\r\n   * Only start if the diagram is modifiable and allows insertions.\r\n   * OPTIONAL: if the user is starting in the diagram's background, not over an existing Part.\r\n   */\r\n  canStart() {\r\n    if (!this.isEnabled) return false\r\n    const diagram = this.diagram\r\n    if (diagram.isReadOnly || diagram.isModelReadOnly) return false\r\n    if (!diagram.allowInsert) return false\r\n    // don't include the following check when this tool is running modally\r\n    if (diagram.currentTool !== this && this.isBackgroundOnly) {\r\n      // only operates in the background, not on some Part\r\n      const part = diagram.findPartAt(diagram.lastInput.documentPoint, true)\r\n      if (part !== null) return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Capture the mouse and use a \"crosshair\" cursor.\r\n   */\r\n  doActivate() {\r\n    super.doActivate()\r\n    this.diagram.isMouseCaptured = true\r\n    this.diagram.currentCursor = 'crosshair'\r\n  }\r\n\r\n  /**\r\n   * Release the mouse and reset the cursor.\r\n   */\r\n  doDeactivate() {\r\n    super.doDeactivate()\r\n    if (this.temporaryShape !== null && this.temporaryShape.part !== null) {\r\n      this.diagram.remove(this.temporaryShape.part)\r\n    }\r\n    this.diagram.currentCursor = ''\r\n    this.diagram.isMouseCaptured = false\r\n  }\r\n\r\n  /**\r\n   * This adds a Point to the {@link #temporaryShape}'s geometry.\r\n   *\r\n   * If the Shape is not yet in the Diagram, its geometry is initialized and\r\n   * its parent Part is added to the Diagram.\r\n   *\r\n   * If the point is less than half a pixel away from the previous point, it is ignored.\r\n   */\r\n  addPoint(p) {\r\n    const shape = this.temporaryShape\r\n    if (shape === null) return\r\n    const part = shape.part\r\n    if (part === null) return\r\n\r\n    // for the temporary Shape, normalize the geometry to be in the viewport\r\n    const viewpt = this.diagram.viewportBounds.position\r\n    const q = new go.Point(p.x - viewpt.x, p.y - viewpt.y)\r\n\r\n    if (part.diagram === null) {\r\n      const f = new go.PathFigure(q.x, q.y, true) // possibly filled, depending on Shape.fill\r\n      const g = new go.Geometry().add(f) // the Shape.geometry consists of a single PathFigure\r\n      shape.geometry = g\r\n      // position the Shape's Part, accounting for the strokeWidth\r\n      part.position = new go.Point(\r\n        viewpt.x - shape.strokeWidth / 2,\r\n        viewpt.y - shape.strokeWidth / 2\r\n      )\r\n      this.diagram.add(part)\r\n    }\r\n\r\n    // only add a point if it isn't too close to the last one\r\n    const geo = shape.geometry\r\n    if (geo !== null) {\r\n      const fig = geo.figures.first()\r\n      if (fig !== null) {\r\n        const segs = fig.segments\r\n        const idx = segs.count - 1\r\n        if (idx >= 0) {\r\n          const last = segs.elt(idx)\r\n          if (\r\n            Math.abs(q.x - last.endX) < 0.5 &&\r\n            Math.abs(q.y - last.endY) < 0.5\r\n          )\r\n            return\r\n        }\r\n\r\n        // must copy whole Geometry in order to add a PathSegment\r\n        const geo2 = geo.copy()\r\n        const fig2 = geo2.figures.first()\r\n        if (fig2 !== null) {\r\n          fig2.add(new go.PathSegment(go.PathSegment.Line, q.x, q.y))\r\n          shape.geometry = geo2\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start drawing the line by starting to accumulate points in the {@link #temporaryShape}'s geometry.\r\n   */\r\n  doMouseDown() {\r\n    if (!this.isActive) {\r\n      this.doActivate()\r\n      // the first point\r\n      this.addPoint(this.diagram.lastInput.documentPoint)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Keep accumulating points in the {@link #temporaryShape}'s geometry.\r\n   */\r\n  doMouseMove() {\r\n    if (this.isActive) {\r\n      this.addPoint(this.diagram.lastInput.documentPoint)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finish drawing the line by adding a node data object holding the\r\n   * geometry string and the node position that the node template can bind to.\r\n   * This copies the {@link #archetypePartData} and adds it to the model.\r\n   */\r\n  doMouseUp() {\r\n    const diagram = this.diagram\r\n    let started = false\r\n    if (this.isActive) {\r\n      started = true\r\n      // the last point\r\n      this.addPoint(diagram.lastInput.documentPoint)\r\n      // normalize geometry and node position\r\n      const viewpt = diagram.viewportBounds.position\r\n      if (this.temporaryShape.geometry !== null) {\r\n        const geo = this.temporaryShape.geometry.copy()\r\n        const pos = geo.normalize()\r\n        pos.x = viewpt.x - pos.x\r\n        pos.y = viewpt.y - pos.y\r\n\r\n        diagram.startTransaction(this.name)\r\n        // create the node data for the model\r\n        const d = diagram.model.copyNodeData(this.archetypePartData)\r\n        if (d !== null) {\r\n          // adding data to model creates the actual Part\r\n          diagram.model.addNodeData(d)\r\n          const part = diagram.findPartForData(d)\r\n          if (part !== null) {\r\n            // assign the location\r\n            part.location = new go.Point(\r\n              pos.x + geo.bounds.width / 2,\r\n              pos.y + geo.bounds.height / 2\r\n            )\r\n            // assign the Shape.geometry\r\n            const shape = part.findObject('SHAPE')\r\n            if (shape !== null) shape.geometry = geo\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.stopTool()\r\n    if (started) diagram.commitTransaction(this.name)\r\n  }\r\n}\r\n","'use strict'\nimport * as go from 'gojs'\n/*\n *  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\n */\n\n/*\n * This is an extension and not part of the main GoJS library.\n * Note that the API for this class may change with any version, even point releases.\n * If you intend to use an extension in production, you should copy the code to your own source directory.\n * Extensions can be found in the GoJS kit under the extensions or extensionsTS folders.\n * See the Extensions intro page (https://gojs.net/latest/intro/extensions.html) for more information.\n */\n\n/**\n * @constructor\n * @extends Tool\n * @class\n * This GeometryReshapingTool class allows for a Shape's Geometry to be modified by the user\n * via the dragging of tool handles.\n * This does not handle Links, whose routes should be reshaped by the LinkReshapingTool.\n * The {@link #reshapeObjectName} needs to identify the named {@link Shape} within the\n * selected {@link Part}.\n * If the shape cannot be found or if its {@link Shape#geometry} is not of type {@link Geometry#Path},\n * this will not show any GeometryReshaping {@link Adornment}.\n * At the current time this tool does not support adding or removing {@link PathSegment}s to the Geometry.\n */\nexport function GeometryReshapingTool() {\n  go.Tool.call(this)\n  this.name = 'GeometryReshaping'\n\n  var h = new go.Shape()\n  h.figure = 'Diamond'\n  h.desiredSize = new go.Size(7, 7)\n  h.fill = 'lightblue'\n  h.stroke = 'dodgerblue'\n  h.cursor = 'move'\n  /** @type {GraphObject} */\n  this._handleArchetype = h\n\n  /** @type {string} */\n  this._reshapeObjectName = 'SHAPE' //??? can't add Part.reshapeObjectName property\n  // there's no Part.reshapeAdornmentTemplate either\n\n  // internal state\n  /** @type {GraphObject} */\n  this._handle = null\n  /** @type {Shape} */\n  this._adornedShape = null\n  /** @type {Geometry} */\n  this._originalGeometry = null // in case the tool is cancelled and the UndoManager is not enabled\n}\ngo.Diagram.inherit(GeometryReshapingTool, go.Tool)\n\n/*\n* A small GraphObject used as a reshape handle for each segment.\n* The default GraphObject is a small blue diamond.\n* @name GeometryReshapingTool#handleArchetype\n\n* @return {GraphObject}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'handleArchetype', {\n  get: function () {\n    return this._handleArchetype\n  },\n  set: function (value) {\n    this._handleArchetype = value\n  }\n})\n\n/*\n* The name of the GraphObject to be reshaped.\n* @name GeometryReshapingTool#reshapeObjectName\n\n* @return {string}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'reshapeObjectName', {\n  get: function () {\n    return this._reshapeObjectName\n  },\n  set: function (value) {\n    this._reshapeObjectName = value\n  }\n})\n\n/*\n* This read-only property returns the {@link GraphObject} that is the tool handle being dragged by the user.\n* This will be contained by an {@link Adornment} whose category is \"GeometryReshaping\".\n* Its {@link Adornment#adornedObject} is the same as the {@link #adornedShape}.\n* @name GeometryReshapingTool#handle\n\n* @return {GraphObject}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'handle', {\n  get: function () {\n    return this._handle\n  }\n})\n\n/*\n* Gets the {@link Shape} that is being reshaped.\n* This must be contained within the selected Part.\n* @name GeometryReshapingTool#adornedShape\n\n* @return {Shape}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'adornedShape', {\n  get: function () {\n    return this._adornedShape\n  }\n})\n\n/*\n* This read-only property remembers the original value for {@link Shape#geometry},\n* so that it can be restored if this tool is cancelled.\n* @name GeometryReshapingTool#originalGeometry\n\n* @return {Geometry}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'originalGeometry', {\n  get: function () {\n    return this._originalGeometry\n  }\n})\n\n/**\n * Show an {@link Adornment} with a reshape handle at each point of the geometry.\n * Don't show anything if {@link #reshapeObjectName} doesn't identify a {@link Shape}\n * that has a {@link Shape#geometry} of type {@link Geometry#Path}.\n * @this {GeometryReshapingTool}\n * @param {Part} part the part.\n */\nGeometryReshapingTool.prototype.updateAdornments = function (part) {\n  if (part === null || part instanceof go.Link) return // this tool never applies to Links\n  if (part.isSelected && !this.diagram.isReadOnly) {\n    var selelt = part.findObject(this.reshapeObjectName)\n    if (\n      selelt instanceof go.Shape &&\n      selelt.actualBounds.isReal() &&\n      selelt.isVisibleObject() &&\n      part.canReshape() &&\n      part.actualBounds.isReal() &&\n      part.isVisible() &&\n      selelt.geometry.type === go.Geometry.Path\n    ) {\n      var adornment = part.findAdornment(this.name)\n      if (adornment === null) {\n        adornment = this.makeAdornment(selelt)\n      }\n      if (adornment !== null) {\n        // update the position/alignment of each handle\n        var geo = selelt.geometry\n        var b = geo.bounds\n        // update the size of the adornment\n        adornment.findObject('BODY').desiredSize = b.size\n        adornment.elements.each(function (h) {\n          if (h._typ === undefined) return\n          var fig = geo.figures.elt(h._fig)\n          var seg = fig.segments.elt(h._seg)\n          var x = 0\n          var y = 0\n          switch (h._typ) {\n            case 0:\n              x = fig.startX\n              y = fig.startY\n              break\n            case 1:\n              x = seg.endX\n              y = seg.endY\n              break\n            case 2:\n              x = seg.point1X\n              y = seg.point1Y\n              break\n            case 3:\n              x = seg.point2X\n              y = seg.point2Y\n              break\n          }\n          h.alignment = new go.Spot(0, 0, x - b.x, y - b.y)\n        })\n\n        part.addAdornment(this.name, adornment)\n        adornment.location = selelt.getDocumentPoint(go.Spot.TopLeft)\n        adornment.angle = selelt.getDocumentAngle()\n        return\n      }\n    }\n  }\n  part.removeAdornment(this.name)\n}\n\n/*\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.makeAdornment = function (selelt) {\n  var adornment = new go.Adornment()\n  adornment.type = go.Panel.Spot\n  adornment.locationObjectName = 'BODY'\n  adornment.locationSpot = new go.Spot(\n    0,\n    0,\n    -selelt.strokeWidth / 2,\n    -selelt.strokeWidth / 2\n  )\n  var h = new go.Shape()\n  h.name = 'BODY'\n  h.fill = null\n  h.stroke = null\n  h.strokeWidth = 0\n  adornment.add(h)\n\n  var geo = selelt.geometry\n  // requires Path Geometry, checked above in updateAdornments\n  for (var f = 0; f < geo.figures.count; f++) {\n    var fig = geo.figures.elt(f)\n    for (var g = 0; g < fig.segments.count; g++) {\n      var seg = fig.segments.elt(g)\n      var h\n      if (g === 0) {\n        h = this.makeHandle(selelt, fig, seg)\n        if (h !== null) {\n          h._typ = 0\n          h._fig = f\n          h._seg = g\n          adornment.add(h)\n        }\n      }\n      h = this.makeHandle(selelt, fig, seg)\n      if (h !== null) {\n        h._typ = 1\n        h._fig = f\n        h._seg = g\n        adornment.add(h)\n      }\n      if (\n        seg.type === go.PathSegment.QuadraticBezier ||\n        seg.type === go.PathSegment.Bezier\n      ) {\n        h = this.makeHandle(selelt, fig, seg)\n        if (h !== null) {\n          h._typ = 2\n          h._fig = f\n          h._seg = g\n          adornment.add(h)\n        }\n        if (seg.type === go.PathSegment.Bezier) {\n          h = this.makeHandle(selelt, fig, seg)\n          if (h !== null) {\n            h._typ = 3\n            h._fig = f\n            h._seg = g\n            adornment.add(h)\n          }\n        }\n      }\n    }\n  }\n  adornment.category = this.name\n  adornment.adornedObject = selelt\n  return adornment\n}\n\n/*\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.makeHandle = function (selelt, fig, seg) {\n  var h = this.handleArchetype\n  if (h === null) return null\n  return h.copy()\n}\n\n/*\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.canStart = function () {\n  if (!this.isEnabled) return false\n\n  var diagram = this.diagram\n  if (diagram === null || diagram.isReadOnly) return false\n  if (!diagram.allowReshape) return false\n  if (!diagram.lastInput.left) return false\n  var h = this.findToolHandleAt(diagram.firstInput.documentPoint, this.name)\n  return h !== null\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doActivate = function () {\n  var diagram = this.diagram\n  if (diagram === null) return\n  this._handle = this.findToolHandleAt(\n    diagram.firstInput.documentPoint,\n    this.name\n  )\n  if (this._handle === null) return\n  var shape = this._handle.part.adornedObject\n  if (!shape) return\n  this._adornedShape = shape\n  diagram.isMouseCaptured = true\n  this.startTransaction(this.name)\n  this._originalGeometry = shape.geometry\n  this.isActive = true\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doDeactivate = function () {\n  this.stopTransaction()\n\n  this._handle = null\n  this._adornedShape = null\n  var diagram = this.diagram\n  if (diagram !== null) diagram.isMouseCaptured = false\n  this.isActive = false\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doCancel = function () {\n  var shape = this._adornedShape\n  if (shape !== null) {\n    // explicitly restore the original route, in case !UndoManager.isEnabled\n    shape.geometry = this._originalGeometry\n  }\n  this.stopTool()\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doMouseMove = function () {\n  var diagram = this.diagram\n  if (this.isActive && diagram !== null) {\n    var newpt = this.computeReshape(diagram.lastInput.documentPoint)\n    this.reshape(newpt)\n  }\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doMouseUp = function () {\n  var diagram = this.diagram\n  if (this.isActive && diagram !== null) {\n    var newpt = this.computeReshape(diagram.lastInput.documentPoint)\n    this.reshape(newpt)\n    this.transactionResult = this.name // success\n  }\n  this.stopTool()\n}\n\n/**\n * @expose\n * @this {GeometryReshapingTool}\n * @param {Point} newPoint the value of the call to {@link #computeReshape}.\n */\nGeometryReshapingTool.prototype.reshape = function (newPoint) {\n  var shape = this.adornedShape\n  if (shape === null || shape.geometry === null) return\n  var locpt = shape.getLocalPoint(newPoint)\n  var geo = shape.geometry.copy()\n  var type = this.handle._typ\n  if (type === undefined) return\n  var fig = geo.figures.elt(this.handle._fig)\n  var seg = fig.segments.elt(this.handle._seg)\n  switch (type) {\n    case 0:\n      fig.startX = locpt.x\n      fig.startY = locpt.y\n      break\n    case 1:\n      seg.endX = locpt.x\n      seg.endY = locpt.y\n      break\n    case 2:\n      seg.point1X = locpt.x\n      seg.point1Y = locpt.y\n      break\n    case 3:\n      seg.point2X = locpt.x\n      seg.point2Y = locpt.y\n      break\n  }\n  var offset = geo.normalize() // avoid any negative coordinates in the geometry\n  shape.desiredSize = new go.Size(NaN, NaN) // clear the desiredSize so Geometry can determine size\n  shape.geometry = geo // modify the Shape\n  var part = shape.part // move the Part holding the Shape\n  part.ensureBounds()\n  if (\n    part.locationObject !== shape &&\n    !part.locationSpot.equals(go.Spot.Center)\n  ) {\n    // but only if the locationSpot isn't Center\n    // support the whole Node being rotated\n    part.move(part.position.copy().subtract(offset.rotate(part.angle)))\n  }\n  this.updateAdornments(part) // update any Adornments of the Part\n  this.diagram.maybeUpdate() // force more frequent drawing for smoother looking behavior\n}\n\n/**\n * @expose\n * @this {GeometryReshapingTool}\n * @param {Point} p the point where the handle is being dragged.\n * @return {Point}\n */\nGeometryReshapingTool.prototype.computeReshape = function (p) {\n  return p // no constraints on the points\n}\n","import * as go from 'gojs'\nimport { ReactDiagram } from 'gojs-react'\nimport * as React from 'react'\n\nimport { FreehandDrawingTool } from './FreehandDrawingTool'\nimport { GeometryReshapingTool } from './GeometryReshapingTool'\n\nimport './Canvas.css'\n\nexport default class DiagramWrapper extends React.Component {\n  /**\n   * Ref to keep a reference to the Diagram component, which provides access to the GoJS diagram via getDiagram().\n   */\n\n  /** @internal */\n  constructor(props) {\n    super(props)\n    this.diagramRef = React.createRef()\n  }\n\n  /**\n   * Get the diagram reference and add any desired diagram listeners.\n   * Typically the same function will be used for each listener, with the function using a switch statement to handle the events.\n   */\n  componentDidMount() {\n    if (!this.diagramRef.current) return\n    const diagram = this.diagramRef.current.getDiagram()\n    if (diagram instanceof go.Diagram) {\n      diagram.addDiagramListener('ChangedSelection', this.props.onDiagramEvent)\n    }\n  }\n\n  /**\n   * Get the diagram reference and remove listeners that were added during mounting.\n   */\n  componentWillUnmount() {\n    if (!this.diagramRef.current) return\n    const diagram = this.diagramRef.current.getDiagram()\n    if (diagram instanceof go.Diagram) {\n      diagram.removeDiagramListener(\n        'ChangedSelection',\n        this.props.onDiagramEvent\n      )\n    }\n  }\n\n  /**\n   * Diagram initialization method, which is passed to the ReactDiagram component.\n   * This method is responsible for making the diagram and initializing the model, any templates,\n   * and maybe doing other initialization tasks like customizing tools.\n   * The model's data should not be set here, as the ReactDiagram component handles that.\n   */\n  initDiagram() {\n    const $ = go.GraphObject.make\n    // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\n    const diagram = $(go.Diagram, {\n      'undoManager.isEnabled': true, // must be set to allow for model change listening\n      // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\n      'clickCreatingTool.archetypeNodeData': {\n        text: 'new node',\n        color: 'lightblue'\n      },\n      //   draggingTool: new FreehandDrawingTool(), // defined in GuidedDraggingTool.ts\n      layout: $(go.ForceDirectedLayout),\n      model: $(go.GraphLinksModel, {\n        linkKeyProperty: 'key', // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n        // positive keys for nodes\n        makeUniqueKeyFunction: (m, data) => {\n          let k = data.key || 1\n          while (m.findNodeDataForKey(k)) k++\n          data.key = k\n          return k\n        },\n        // negative keys for links\n        makeUniqueLinkKeyFunction: (m, data) => {\n          let k = data.key || -1\n          while (m.findLinkDataForKey(k)) k--\n          data.key = k\n          return k\n        }\n      })\n    })\n\n    diagram.toolManager.mouseDownTools.insertAt(3, new GeometryReshapingTool())\n\n    diagram.nodeTemplateMap.add(\n      'FreehandDrawing',\n      $(\n        go.Part,\n        { locationSpot: go.Spot.Center, isLayoutPositioned: false },\n        new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectionAdorned: true,\n          selectionObjectName: 'SHAPE',\n          // custom selection adornment: a blue rectangle\n          selectionAdornmentTemplate: $(\n            go.Adornment,\n            'Auto',\n            $(go.Shape, { stroke: 'dodgerblue', fill: null }),\n            $(go.Placeholder, { margin: -1 })\n          )\n        },\n        { resizable: true, resizeObjectName: 'SHAPE' },\n        { rotatable: true, rotateObjectName: 'SHAPE' },\n        { reshapable: true }, // GeometryReshapingTool assumes nonexistent Part.reshapeObjectName would be \"SHAPE\"\n        $(\n          go.Shape,\n          { name: 'SHAPE', fill: null, strokeWidth: 1.5 },\n          new go.Binding('desiredSize', 'size', go.Size.parse).makeTwoWay(\n            go.Size.stringify\n          ),\n          new go.Binding('angle').makeTwoWay(),\n          new go.Binding('geometryString', 'geo').makeTwoWay(),\n          new go.Binding('fill'),\n          new go.Binding('stroke'),\n          new go.Binding('strokeWidth')\n        )\n      )\n    )\n\n    const tool = new FreehandDrawingTool()\n    // provide the default JavaScript object for a new polygon in the model\n    tool.archetypePartData = {\n      stroke: 'black',\n      strokeWidth: 1.5,\n      category: 'FreehandDrawing'\n    }\n    // allow the tool to start on top of an existing Part\n    tool.isBackgroundOnly = false\n    // install as first mouse-move-tool\n    diagram.toolManager.mouseMoveTools.insertAt(0, tool)\n\n    return diagram\n  }\n\n  modeChange = (isDraw) => {\n    const diagram = this.diagramRef.current.getDiagram()\n    const tool = diagram.toolManager.findTool('FreehandDrawing')\n    tool.isEnabled = isDraw\n  }\n\n  render() {\n    return (\n      <div className=\"diagram-wrapper\">\n        <ReactDiagram\n          ref={this.diagramRef}\n          divClassName=\"diagram-component\"\n          initDiagram={this.initDiagram}\n        />\n        <div className=\"mode-buttons\">\n          <button onClick={() => this.modeChange(false)}>Select</button>\n          <button onClick={() => this.modeChange(true)}>Draw mode</button>\n        </div>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\n\nimport DiagramWrapper from './DiagramWrapper'\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return <DiagramWrapper />\n  }\n}\n","import React from 'react'\nimport './PanelEntity.css'\n\nconst PanelEntity = ({ panel }) => {\n  console.log(panel)\n  const isVisible = panel.visible === 'True'\n\n  if (!isVisible) return null\n\n  return (\n    <div className=\"item-wrapper\" style={panel.styles}>\n      <div>Name: {panel.name}</div>\n      <div>Type:{panel.type}</div>\n      <div>Title:{panel.title}</div>\n    </div>\n  )\n}\nexport default PanelEntity\n","import React from 'react'\nimport Canvas from '../Canvas/Canvas'\nimport './Panel.css'\nimport PanelEntity from './PanelEntity/PanelEntity'\n\nconst Panel = ({ children, panels }) => {\n  if (!panels) return <div className=\"entity-field\">{children}</div>\n  const { left, right, bottom, top } = panels\n\n  return (\n    <div className=\"upper-wrapper\">\n      {Boolean(left) && left.length && (\n        <div className=\"left-side\">\n          {left.map((panel, index) => (\n            <PanelEntity key={index} panel={panel} />\n          ))}\n        </div>\n      )}\n      <div className=\"middle-side\">\n        {Boolean(top) && top.length && (\n          <div className=\"top-field\">\n            {top.map((panel, index) => (\n              <PanelEntity key={index} panel={panel} />\n            ))}\n          </div>\n        )}\n        <div className=\"entity-field\">{<Canvas />}</div>\n        {Boolean(bottom) && bottom.length && (\n          <div className=\"bottom-field\">\n            {bottom.map((panel, index) => (\n              <PanelEntity key={index} panel={panel} />\n            ))}\n          </div>\n        )}\n      </div>\n      {Boolean(right) && right.length && (\n        <div className=\"right-side\">\n          {' '}\n          {right.map((panel, index) => (\n            <PanelEntity key={index} panel={panel} />\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\nexport default Panel\n","export const getBasicParams = (item) => {\n  return {\n    left: item.rectDotLeft,\n    top: item.rectDotTop,\n    name: item.entityName,\n    property: item.setName,\n  };\n};\n","import React from 'react'\nimport { getBasicParams } from '../../utils/getBasicParams'\nimport './Entity.css'\n\nconst Entity = ({ setSelected, item }) => {\n  const { left, top, name, property } = getBasicParams(item)\n  console.log(getBasicParams(item))\n\n  return (\n    <div\n      className=\"EntityItem\"\n      style={{ left, top }}\n      onClick={() => setSelected(item)}\n    >\n      <span>{name}</span>\n    </div>\n  )\n}\nexport default Entity\n","import { useEffect, useState } from 'react'\nimport { EntityService } from '../services'\n\nconst getAttributes = (entity) => {\n  const [elem] = entity.data\n  if (!elem) return\n  return elem.attributes\n}\n\nconst getNumber = (entity) => {\n  const value = entity['value']\n  const defaultValue = entity['default']\n  if (!value && !defaultValue) return\n  if (!value) return defaultValue\n  return value\n}\n\nconst getCssStyles = (atrs) => {\n  const css = (property, cssName, add = false) => {\n    const prettyName = cssName || property\n    const defaultStyle = atrs[property]['default']\n    const styleValue = atrs[property]['value']\n    if (!styleValue && !defaultStyle) return\n    if (!styleValue) return { [prettyName]: defaultStyle }\n    return { [prettyName]: Boolean(add) ? styleValue + add : styleValue }\n  }\n  return {\n    ...css('background-color', 'backgroundColor'),\n    ...css('width', false, 'px'),\n    ...css('border'),\n    ...css('border-color', 'borderColor'),\n    ...css('font'),\n    ...css('font-color', 'fontColor'),\n    ...css('height', false, 'px')\n  }\n}\n\nconst getEntityNameForPanelDetails = (entity, setLoading) => {\n  const regex = /object:/gi\n  const atr = getAttributes(entity)\n  if (!atr) {\n    setLoading(false)\n    return\n  }\n  const name = atr.children && atr.children.value\n  return name.replace(regex, '')\n}\n\nconst retrievePanels = async (attributes) => {\n  const extractPanel = async (panelProperty) => {\n    if (!attributes[panelProperty].value) return\n    const regex = /panel:/gi\n    const panelName = attributes[panelProperty].value.replace(regex, '')\n    const res = await EntityService.getDetails('panel', panelName)\n    const atrs = getAttributes(res)\n    const numberPanels = atrs['window-count']['value']\n    const panelItem = {\n      name: getNumber(atrs.name),\n      title: getNumber(atrs.title),\n      type: getNumber(atrs.type),\n      visible: getNumber(atrs.visible),\n      styles: getCssStyles(atrs)\n    }\n    if (numberPanels === 1) return [{ ...panelItem }]\n    const result = []\n    for (let j = 0; j < numberPanels; j++) {\n      result.push({ ...panelItem })\n    }\n    return result\n  }\n  return {\n    top: await extractPanel('top-panel'),\n    bottom: await extractPanel('bottom-panel'),\n    left: await extractPanel('left-panel'),\n    right: await extractPanel('right-panel')\n  }\n}\n\nexport const usePopulateDetails = (selected, setPanels, setLoading) => {\n  useEffect(() => {\n    if (!selected) return\n    setLoading(true)\n    const { setName, entityName } = selected\n    const requests = async () => {\n      const firstsResponse = await EntityService.getDetails(setName, entityName)\n\n      const panelEntity = getEntityNameForPanelDetails(\n        firstsResponse,\n        setLoading\n      )\n      if (!panelEntity) return\n      const panelsReg = await EntityService.getDetails('object', panelEntity)\n      const panels = await retrievePanels(getAttributes(panelsReg))\n      setPanels(panels)\n      setLoading(false)\n    }\n    requests()\n  }, [selected, setPanels, setLoading])\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { usePopulateEntities } from '../../utils/usePopulateEntities'\nimport './EntityList.css'\nimport Panel from '../Panel/Panel'\nimport Entity from '../Entity/Entity'\nimport { usePopulateDetails } from '../../utils/usePopulateDetails'\n\nconst EntityList = () => {\n  const [selected, setSelected] = useState('')\n  const [panels, setPanels] = useState()\n  const [loading, setLoading] = useState(false)\n\n  const { entities, addEntityItem } = usePopulateEntities(setLoading)\n\n  usePopulateDetails(selected, setPanels, setLoading)\n\n  useEffect(() => {\n    setPanels()\n  }, [selected])\n\n  if (loading) {\n    return (\n      <div className=\"Layout\">\n        <div className=\"Loading\">Loading</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"Layout\">\n      <Panel panels={panels} selected={selected}>\n        {entities.map((item, index) => (\n          <Entity key={index} item={item} setSelected={setSelected} />\n        ))}\n      </Panel>\n    </div>\n  )\n}\nexport default EntityList\n","import { useEffect, useState } from 'react'\nimport { EntityService } from '../services'\n\n//const initialPage = \"/apmPage/entities/page1\";\nconst initialPage = '/apmPage/entities/.*'\n\nexport const usePopulateEntities = (setLoading) => {\n  const [entities, setEntities] = useState([])\n  useEffect(() => {\n    setLoading(true)\n    EntityService.getAll(initialPage)\n      .then((res) => {\n        const result = res.data.reduce(\n          (acc, item) => [...acc, ...JSON.parse(item.attributes.objects)],\n          []\n        )\n        setEntities(result)\n        setLoading(false)\n      })\n      .catch((e) => {\n        console.log(`Error-${e}`)\n      })\n  }, [setLoading])\n  const addEntityItem = (entity) => setEntities((state) => [...state, entity])\n\n  return { entities, addEntityItem }\n}\n","import './App.css'\nimport EntityList from './components/EntityList/EntityList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EntityList />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}