[{"/home/jsuser/Documents/projects/new-project/src/index.js":"1","/home/jsuser/Documents/projects/new-project/src/App.js":"2","/home/jsuser/Documents/projects/new-project/src/reportWebVitals.js":"3","/home/jsuser/Documents/projects/new-project/src/components/EntityList/EntityList.jsx":"4","/home/jsuser/Documents/projects/new-project/src/components/Entity/Entity.jsx":"5","/home/jsuser/Documents/projects/new-project/src/components/Panel/Panel.jsx":"6","/home/jsuser/Documents/projects/new-project/src/components/Panel/PanelEntity/PanelEntity.jsx":"7","/home/jsuser/Documents/projects/new-project/src/utils/getBasicParams.js":"8","/home/jsuser/Documents/projects/new-project/src/utils/usePopulateEntities.js":"9","/home/jsuser/Documents/projects/new-project/src/utils/usePopulateDetails.js":"10","/home/jsuser/Documents/projects/new-project/src/services/index.js":"11","/home/jsuser/Documents/projects/new-project/src/services/Entity.js":"12","/home/jsuser/Documents/projects/new-project/src/services/http.js":"13","/home/jsuser/Documents/projects/new-project/src/components/Canvas/FreehandDrawingTool.js":"14","/home/jsuser/Documents/projects/new-project/src/components/Canvas/Canvas.jsx":"15","/home/jsuser/Documents/projects/new-project/src/components/Canvas/DiagramWrapper.jsx":"16","/home/jsuser/Documents/projects/new-project/src/components/Canvas/GeometryReshapingTool.js":"17","/home/jsuser/Documents/projects/new-project/src/config/index.js":"18"},{"size":493,"mtime":1612961857358,"results":"19","hashOfConfig":"20"},{"size":192,"mtime":1612959769316,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1607191726000,"results":"22","hashOfConfig":"20"},{"size":1023,"mtime":1612964503183,"results":"23","hashOfConfig":"20"},{"size":429,"mtime":1612964514515,"results":"24","hashOfConfig":"20"},{"size":1377,"mtime":1612968352381,"results":"25","hashOfConfig":"20"},{"size":408,"mtime":1612880188982,"results":"26","hashOfConfig":"20"},{"size":170,"mtime":1612880188986,"results":"27","hashOfConfig":"20"},{"size":788,"mtime":1612880188986,"results":"28","hashOfConfig":"20"},{"size":3012,"mtime":1612964472455,"results":"29","hashOfConfig":"20"},{"size":63,"mtime":1612880188982,"results":"30","hashOfConfig":"20"},{"size":231,"mtime":1612880188982,"results":"31","hashOfConfig":"20"},{"size":629,"mtime":1612964199489,"results":"32","hashOfConfig":"20"},{"size":8557,"mtime":1612946813124,"results":"33","hashOfConfig":"20"},{"size":182,"mtime":1612964587578,"results":"34","hashOfConfig":"20"},{"size":5402,"mtime":1612957524655,"results":"35","hashOfConfig":"20"},{"size":12003,"mtime":1612964555799,"results":"36","hashOfConfig":"20"},{"size":438,"mtime":1612963947354,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"vwhhhf",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/home/jsuser/Documents/projects/new-project/src/index.js",[],["76","77"],"/home/jsuser/Documents/projects/new-project/src/App.js",[],"/home/jsuser/Documents/projects/new-project/src/reportWebVitals.js",[],"/home/jsuser/Documents/projects/new-project/src/components/EntityList/EntityList.jsx",[],"/home/jsuser/Documents/projects/new-project/src/components/Entity/Entity.jsx",[],"/home/jsuser/Documents/projects/new-project/src/components/Panel/Panel.jsx",[],"/home/jsuser/Documents/projects/new-project/src/components/Panel/PanelEntity/PanelEntity.jsx",[],"/home/jsuser/Documents/projects/new-project/src/utils/getBasicParams.js",[],"/home/jsuser/Documents/projects/new-project/src/utils/usePopulateEntities.js",[],"/home/jsuser/Documents/projects/new-project/src/utils/usePopulateDetails.js",[],"/home/jsuser/Documents/projects/new-project/src/services/index.js",[],"/home/jsuser/Documents/projects/new-project/src/services/Entity.js",[],"/home/jsuser/Documents/projects/new-project/src/services/http.js",[],"/home/jsuser/Documents/projects/new-project/src/components/Canvas/FreehandDrawingTool.js",[],"/home/jsuser/Documents/projects/new-project/src/components/Canvas/Canvas.jsx",[],"/home/jsuser/Documents/projects/new-project/src/components/Canvas/DiagramWrapper.jsx",[],"/home/jsuser/Documents/projects/new-project/src/components/Canvas/GeometryReshapingTool.js",["78","79"],"import * as go from 'gojs'\n/*\n *  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\n */\n\n/*\n * This is an extension and not part of the main GoJS library.\n * Note that the API for this class may change with any version, even point releases.\n * If you intend to use an extension in production, you should copy the code to your own source directory.\n * Extensions can be found in the GoJS kit under the extensions or extensionsTS folders.\n * See the Extensions intro page (https://gojs.net/latest/intro/extensions.html) for more information.\n */\n\n/**\n * @constructor\n * @extends Tool\n * @class\n * This GeometryReshapingTool class allows for a Shape's Geometry to be modified by the user\n * via the dragging of tool handles.\n * This does not handle Links, whose routes should be reshaped by the LinkReshapingTool.\n * The {@link #reshapeObjectName} needs to identify the named {@link Shape} within the\n * selected {@link Part}.\n * If the shape cannot be found or if its {@link Shape#geometry} is not of type {@link Geometry#Path},\n * this will not show any GeometryReshaping {@link Adornment}.\n * At the current time this tool does not support adding or removing {@link PathSegment}s to the Geometry.\n */\nexport function GeometryReshapingTool() {\n  go.Tool.call(this)\n  this.name = 'GeometryReshaping'\n\n  var h = new go.Shape()\n  h.figure = 'Diamond'\n  h.desiredSize = new go.Size(7, 7)\n  h.fill = 'lightblue'\n  h.stroke = 'dodgerblue'\n  h.cursor = 'move'\n  /** @type {GraphObject} */\n  this._handleArchetype = h\n\n  /** @type {string} */\n  this._reshapeObjectName = 'SHAPE' //??? can't add Part.reshapeObjectName property\n  // there's no Part.reshapeAdornmentTemplate either\n\n  // internal state\n  /** @type {GraphObject} */\n  this._handle = null\n  /** @type {Shape} */\n  this._adornedShape = null\n  /** @type {Geometry} */\n  this._originalGeometry = null // in case the tool is cancelled and the UndoManager is not enabled\n}\ngo.Diagram.inherit(GeometryReshapingTool, go.Tool)\n\n/*\n* A small GraphObject used as a reshape handle for each segment.\n* The default GraphObject is a small blue diamond.\n* @name GeometryReshapingTool#handleArchetype\n\n* @return {GraphObject}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'handleArchetype', {\n  get: function () {\n    return this._handleArchetype\n  },\n  set: function (value) {\n    this._handleArchetype = value\n  }\n})\n\n/*\n* The name of the GraphObject to be reshaped.\n* @name GeometryReshapingTool#reshapeObjectName\n\n* @return {string}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'reshapeObjectName', {\n  get: function () {\n    return this._reshapeObjectName\n  },\n  set: function (value) {\n    this._reshapeObjectName = value\n  }\n})\n\n/*\n* This read-only property returns the {@link GraphObject} that is the tool handle being dragged by the user.\n* This will be contained by an {@link Adornment} whose category is \"GeometryReshaping\".\n* Its {@link Adornment#adornedObject} is the same as the {@link #adornedShape}.\n* @name GeometryReshapingTool#handle\n\n* @return {GraphObject}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'handle', {\n  get: function () {\n    return this._handle\n  }\n})\n\n/*\n* Gets the {@link Shape} that is being reshaped.\n* This must be contained within the selected Part.\n* @name GeometryReshapingTool#adornedShape\n\n* @return {Shape}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'adornedShape', {\n  get: function () {\n    return this._adornedShape\n  }\n})\n\n/*\n* This read-only property remembers the original value for {@link Shape#geometry},\n* so that it can be restored if this tool is cancelled.\n* @name GeometryReshapingTool#originalGeometry\n\n* @return {Geometry}\n*/\nObject.defineProperty(GeometryReshapingTool.prototype, 'originalGeometry', {\n  get: function () {\n    return this._originalGeometry\n  }\n})\n\n/**\n * Show an {@link Adornment} with a reshape handle at each point of the geometry.\n * Don't show anything if {@link #reshapeObjectName} doesn't identify a {@link Shape}\n * that has a {@link Shape#geometry} of type {@link Geometry#Path}.\n * @this {GeometryReshapingTool}\n * @param {Part} part the part.\n */\nGeometryReshapingTool.prototype.updateAdornments = function (part) {\n  if (part === null || part instanceof go.Link) return // this tool never applies to Links\n  if (part.isSelected && !this.diagram.isReadOnly) {\n    var selelt = part.findObject(this.reshapeObjectName)\n    if (\n      selelt instanceof go.Shape &&\n      selelt.actualBounds.isReal() &&\n      selelt.isVisibleObject() &&\n      part.canReshape() &&\n      part.actualBounds.isReal() &&\n      part.isVisible() &&\n      selelt.geometry.type === go.Geometry.Path\n    ) {\n      var adornment = part.findAdornment(this.name)\n      if (adornment === null) {\n        adornment = this.makeAdornment(selelt)\n      }\n      if (adornment !== null) {\n        // update the position/alignment of each handle\n        var geo = selelt.geometry\n        var b = geo.bounds\n        // update the size of the adornment\n        adornment.findObject('BODY').desiredSize = b.size\n        adornment.elements.each(function (h) {\n          if (h._typ === undefined) return\n          var fig = geo.figures.elt(h._fig)\n          var seg = fig.segments.elt(h._seg)\n          var x = 0\n          var y = 0\n          switch (h._typ) {\n            case 0:\n              x = fig.startX\n              y = fig.startY\n              break\n            case 1:\n              x = seg.endX\n              y = seg.endY\n              break\n            case 2:\n              x = seg.point1X\n              y = seg.point1Y\n              break\n            case 3:\n              x = seg.point2X\n              y = seg.point2Y\n              break\n            default:\n              x = fig.startX\n              y = fig.startY\n          }\n          h.alignment = new go.Spot(0, 0, x - b.x, y - b.y)\n        })\n\n        part.addAdornment(this.name, adornment)\n        adornment.location = selelt.getDocumentPoint(go.Spot.TopLeft)\n        adornment.angle = selelt.getDocumentAngle()\n        return\n      }\n    }\n  }\n  part.removeAdornment(this.name)\n}\n\n/*\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.makeAdornment = function (selelt) {\n  var adornment = new go.Adornment()\n  adornment.type = go.Panel.Spot\n  adornment.locationObjectName = 'BODY'\n  adornment.locationSpot = new go.Spot(\n    0,\n    0,\n    -selelt.strokeWidth / 2,\n    -selelt.strokeWidth / 2\n  )\n  var h = new go.Shape()\n  h.name = 'BODY'\n  h.fill = null\n  h.stroke = null\n  h.strokeWidth = 0\n  adornment.add(h)\n\n  var geo = selelt.geometry\n  // requires Path Geometry, checked above in updateAdornments\n  for (var f = 0; f < geo.figures.count; f++) {\n    var fig = geo.figures.elt(f)\n    for (var g = 0; g < fig.segments.count; g++) {\n      var seg = fig.segments.elt(g)\n      var h\n      if (g === 0) {\n        h = this.makeHandle(selelt, fig, seg)\n        if (h !== null) {\n          h._typ = 0\n          h._fig = f\n          h._seg = g\n          adornment.add(h)\n        }\n      }\n      h = this.makeHandle(selelt, fig, seg)\n      if (h !== null) {\n        h._typ = 1\n        h._fig = f\n        h._seg = g\n        adornment.add(h)\n      }\n      if (\n        seg.type === go.PathSegment.QuadraticBezier ||\n        seg.type === go.PathSegment.Bezier\n      ) {\n        h = this.makeHandle(selelt, fig, seg)\n        if (h !== null) {\n          h._typ = 2\n          h._fig = f\n          h._seg = g\n          adornment.add(h)\n        }\n        if (seg.type === go.PathSegment.Bezier) {\n          h = this.makeHandle(selelt, fig, seg)\n          if (h !== null) {\n            h._typ = 3\n            h._fig = f\n            h._seg = g\n            adornment.add(h)\n          }\n        }\n      }\n    }\n  }\n  adornment.category = this.name\n  adornment.adornedObject = selelt\n  return adornment\n}\n\n/*\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.makeHandle = function (selelt, fig, seg) {\n  var h = this.handleArchetype\n  if (h === null) return null\n  return h.copy()\n}\n\n/*\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.canStart = function () {\n  if (!this.isEnabled) return false\n\n  var diagram = this.diagram\n  if (diagram === null || diagram.isReadOnly) return false\n  if (!diagram.allowReshape) return false\n  if (!diagram.lastInput.left) return false\n  var h = this.findToolHandleAt(diagram.firstInput.documentPoint, this.name)\n  return h !== null\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doActivate = function () {\n  var diagram = this.diagram\n  if (diagram === null) return\n  this._handle = this.findToolHandleAt(\n    diagram.firstInput.documentPoint,\n    this.name\n  )\n  if (this._handle === null) return\n  var shape = this._handle.part.adornedObject\n  if (!shape) return\n  this._adornedShape = shape\n  diagram.isMouseCaptured = true\n  this.startTransaction(this.name)\n  this._originalGeometry = shape.geometry\n  this.isActive = true\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doDeactivate = function () {\n  this.stopTransaction()\n\n  this._handle = null\n  this._adornedShape = null\n  var diagram = this.diagram\n  if (diagram !== null) diagram.isMouseCaptured = false\n  this.isActive = false\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doCancel = function () {\n  var shape = this._adornedShape\n  if (shape !== null) {\n    // explicitly restore the original route, in case !UndoManager.isEnabled\n    shape.geometry = this._originalGeometry\n  }\n  this.stopTool()\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doMouseMove = function () {\n  var diagram = this.diagram\n  if (this.isActive && diagram !== null) {\n    var newpt = this.computeReshape(diagram.lastInput.documentPoint)\n    this.reshape(newpt)\n  }\n}\n\n/**\n * @this {GeometryReshapingTool}\n */\nGeometryReshapingTool.prototype.doMouseUp = function () {\n  var diagram = this.diagram\n  if (this.isActive && diagram !== null) {\n    var newpt = this.computeReshape(diagram.lastInput.documentPoint)\n    this.reshape(newpt)\n    this.transactionResult = this.name // success\n  }\n  this.stopTool()\n}\n\n/**\n * @expose\n * @this {GeometryReshapingTool}\n * @param {Point} newPoint the value of the call to {@link #computeReshape}.\n */\nGeometryReshapingTool.prototype.reshape = function (newPoint) {\n  var shape = this.adornedShape\n  if (shape === null || shape.geometry === null) return\n  var locpt = shape.getLocalPoint(newPoint)\n  var geo = shape.geometry.copy()\n  var type = this.handle._typ\n  if (type === undefined) return\n  var fig = geo.figures.elt(this.handle._fig)\n  var seg = fig.segments.elt(this.handle._seg)\n  switch (type) {\n    case 0:\n      fig.startX = locpt.x\n      fig.startY = locpt.y\n      break\n    case 1:\n      seg.endX = locpt.x\n      seg.endY = locpt.y\n      break\n    case 2:\n      seg.point1X = locpt.x\n      seg.point1Y = locpt.y\n      break\n    case 3:\n      seg.point2X = locpt.x\n      seg.point2Y = locpt.y\n      break\n  }\n  var offset = geo.normalize() // avoid any negative coordinates in the geometry\n  shape.desiredSize = new go.Size(NaN, NaN) // clear the desiredSize so Geometry can determine size\n  shape.geometry = geo // modify the Shape\n  var part = shape.part // move the Part holding the Shape\n  part.ensureBounds()\n  if (\n    part.locationObject !== shape &&\n    !part.locationSpot.equals(go.Spot.Center)\n  ) {\n    // but only if the locationSpot isn't Center\n    // support the whole Node being rotated\n    part.move(part.position.copy().subtract(offset.rotate(part.angle)))\n  }\n  this.updateAdornments(part) // update any Adornments of the Part\n  this.diagram.maybeUpdate() // force more frequent drawing for smoother looking behavior\n}\n\n/**\n * @expose\n * @this {GeometryReshapingTool}\n * @param {Point} p the point where the handle is being dragged.\n * @return {Point}\n */\nGeometryReshapingTool.prototype.computeReshape = function (p) {\n  return p // no constraints on the points\n}\n","/home/jsuser/Documents/projects/new-project/src/config/index.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":221,"column":11,"nodeType":"86","messageId":"87","endLine":221,"endColumn":12},{"ruleId":"88","severity":1,"message":"89","line":372,"column":3,"nodeType":"90","messageId":"91","endLine":389,"endColumn":4},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-redeclare","'h' is already defined.","Identifier","redeclared","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]