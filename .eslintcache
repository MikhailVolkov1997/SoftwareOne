[{"/home/jsuser/Documents/projects/new-project/src/index.js":"1","/home/jsuser/Documents/projects/new-project/src/App.js":"2","/home/jsuser/Documents/projects/new-project/src/reportWebVitals.js":"3","/home/jsuser/Documents/projects/new-project/src/components/EntityList/EntityList.jsx":"4","/home/jsuser/Documents/projects/new-project/src/components/Entity/Entity.jsx":"5","/home/jsuser/Documents/projects/new-project/src/components/Panel/Panel.jsx":"6","/home/jsuser/Documents/projects/new-project/src/api.js":"7","/home/jsuser/Documents/projects/new-project/src/components/Panel/PanelEntity/PanelEntity.jsx":"8","/home/jsuser/Documents/projects/new-project/src/utils/getBasicParams.js":"9","/home/jsuser/Documents/projects/new-project/src/utils/usePopulateEntities.js":"10","/home/jsuser/Documents/projects/new-project/src/utils/usePopulateDetails.js":"11","/home/jsuser/Documents/projects/new-project/src/services/index.js":"12","/home/jsuser/Documents/projects/new-project/src/services/Entity.js":"13","/home/jsuser/Documents/projects/new-project/src/services/http.js":"14"},{"size":500,"mtime":1607191726000,"results":"15","hashOfConfig":"16"},{"size":196,"mtime":1608578101000,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1607191726000,"results":"18","hashOfConfig":"16"},{"size":1038,"mtime":1612876977948,"results":"19","hashOfConfig":"16"},{"size":439,"mtime":1612872211763,"results":"20","hashOfConfig":"16"},{"size":1337,"mtime":1612880041465,"results":"21","hashOfConfig":"16"},{"size":472,"mtime":1612875780480,"results":"22","hashOfConfig":"16"},{"size":408,"mtime":1612872163735,"results":"23","hashOfConfig":"16"},{"size":170,"mtime":1612872196924,"results":"24","hashOfConfig":"16"},{"size":788,"mtime":1612875851265,"results":"25","hashOfConfig":"16"},{"size":3022,"mtime":1612875909905,"results":"26","hashOfConfig":"16"},{"size":63,"mtime":1612875841153,"results":"27","hashOfConfig":"16"},{"size":231,"mtime":1612876039002,"results":"28","hashOfConfig":"16"},{"size":678,"mtime":1612876846881,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"vwhhhf",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jsuser/Documents/projects/new-project/src/index.js",[],["61","62"],"/home/jsuser/Documents/projects/new-project/src/App.js",[],"/home/jsuser/Documents/projects/new-project/src/reportWebVitals.js",[],"/home/jsuser/Documents/projects/new-project/src/components/EntityList/EntityList.jsx",["63"],"/home/jsuser/Documents/projects/new-project/src/components/Entity/Entity.jsx",["64"],"import React from 'react'\nimport { getBasicParams } from '../../utils/getBasicParams'\nimport './Entity.css'\n\nconst Entity = ({ setSelected, item }) => {\n  const { left, top, name, property } = getBasicParams(item)\n  console.log(getBasicParams(item))\n\n  return (\n    <div\n      className=\"EntityItem\"\n      style={{ left, top }}\n      onClick={() => setSelected(item)}\n    >\n      <span>{name}</span>\n    </div>\n  )\n}\nexport default Entity\n","/home/jsuser/Documents/projects/new-project/src/components/Panel/Panel.jsx",[],"/home/jsuser/Documents/projects/new-project/src/api.js",[],"/home/jsuser/Documents/projects/new-project/src/components/Panel/PanelEntity/PanelEntity.jsx",[],"/home/jsuser/Documents/projects/new-project/src/utils/getBasicParams.js",[],"/home/jsuser/Documents/projects/new-project/src/utils/usePopulateEntities.js",[],"/home/jsuser/Documents/projects/new-project/src/utils/usePopulateDetails.js",["65"],"import { useEffect, useState } from 'react'\nimport { EntityService } from '../services'\n\nconst getAttributes = (entity) => {\n  const [elem] = entity.data\n  if (!elem) return\n  return elem.attributes\n}\n\nconst getNumber = (entity) => {\n  const value = entity['value']\n  const defaultValue = entity['default']\n  if (!value && !defaultValue) return\n  if (!value) return defaultValue\n  return value\n}\n\nconst getCssStyles = (atrs) => {\n  const css = (property, cssName, add = false) => {\n    const prettyName = cssName || property\n    const defaultStyle = atrs[property]['default']\n    const styleValue = atrs[property]['value']\n    if (!styleValue && !defaultStyle) return\n    if (!styleValue) return { [prettyName]: defaultStyle }\n    return { [prettyName]: Boolean(add) ? styleValue + add : styleValue }\n  }\n  return {\n    ...css('background-color', 'backgroundColor'),\n    ...css('width', false, 'px'),\n    ...css('border'),\n    ...css('border-color', 'borderColor'),\n    ...css('font'),\n    ...css('font-color', 'fontColor'),\n    ...css('height', false, 'px')\n  }\n}\n\nconst getEntityNameForPanelDetails = (entity, setLoading) => {\n  const regex = /object:/gi\n  const atr = getAttributes(entity)\n  if (!atr) {\n    setLoading(false)\n    return\n  }\n  const name = atr.children && atr.children.value\n  return name.replace(regex, '')\n}\n\nconst retrievePanels = async (attributes) => {\n  const extractPanel = async (panelProperty) => {\n    if (!attributes[panelProperty].value) return\n    const regex = /panel:/gi\n    const panelName = attributes[panelProperty].value.replace(regex, '')\n    const res = await EntityService.getDetails('panel', panelName)\n    const atrs = getAttributes(res)\n    const numberPanels = atrs['window-count']['value']\n    const panelItem = {\n      name: getNumber(atrs.name),\n      title: getNumber(atrs.title),\n      type: getNumber(atrs.type),\n      visible: getNumber(atrs.visible),\n      styles: getCssStyles(atrs)\n    }\n    if (numberPanels === 1) return [{ ...panelItem }]\n    const result = []\n    for (let j = 0; j < numberPanels; j++) {\n      result.push({ ...panelItem })\n    }\n    return result\n  }\n  return {\n    top: await extractPanel('top-panel'),\n    bottom: await extractPanel('bottom-panel'),\n    left: await extractPanel('left-panel'),\n    right: await extractPanel('right-panel')\n  }\n}\n\nexport const usePopulateDetails = (selected, setPanels, setLoading) => {\n  useEffect(() => {\n    if (!selected) return\n    setLoading(true)\n    const { setName, entityName } = selected\n    const requests = async () => {\n      const firstsResponse = await EntityService.getDetails(setName, entityName)\n\n      const panelEntity = getEntityNameForPanelDetails(\n        firstsResponse,\n        setLoading\n      )\n      if (!panelEntity) return\n      const panelsReg = await EntityService.getDetails('object', panelEntity)\n      const panels = await retrievePanels(getAttributes(panelsReg))\n      setPanels(panels)\n      setLoading(false)\n    }\n    requests()\n  }, [selected, setPanels, setLoading])\n}\n","/home/jsuser/Documents/projects/new-project/src/services/index.js",[],"/home/jsuser/Documents/projects/new-project/src/services/Entity.js",[],"/home/jsuser/Documents/projects/new-project/src/services/http.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":14,"column":21,"nodeType":"72","messageId":"73","endLine":14,"endColumn":34},{"ruleId":"70","severity":1,"message":"74","line":6,"column":28,"nodeType":"72","messageId":"73","endLine":6,"endColumn":36},{"ruleId":"70","severity":1,"message":"75","line":1,"column":21,"nodeType":"72","messageId":"73","endLine":1,"endColumn":29},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'addEntityItem' is assigned a value but never used.","Identifier","unusedVar","'property' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]